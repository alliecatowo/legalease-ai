"""Base model mixins and utilities."""

import uuid
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy import UniqueConstraint, event

from app.core import identifiers


class UUIDMixin:
    """
    Mixin class that provides UUID primary key and NanoID GID for all models.

    This mixin adds:
    - id: UUID primary key with auto-generation via PostgreSQL gen_random_uuid()
    - gid: 12-character NanoID string for use in URLs (independent from UUID)

    The GID is automatically generated before insert using a SQLAlchemy event listener.

    Example:
        class Case(UUIDMixin, Base):
            __tablename__ = "cases"
            name = Column(String)

        # Both UUID and GID are auto-generated:
        case = Case(name="Test")
        db.add(case)
        db.commit()
        # case.id = UUID('...')  # Auto-generated by PostgreSQL
        # case.gid = 'a1B2c3D4e5F6'  # Auto-generated NanoID
    """

    id: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        primary_key=True,
        server_default=sa.text("gen_random_uuid()"),
        nullable=False
    )

    gid: Mapped[str] = mapped_column(
        sa.String(22),  # Allow 22 for migration compatibility (12 is new default)
        unique=True,
        nullable=False,
        index=True
    )

    __table_args__ = (
        UniqueConstraint('gid', name='uq_gid'),
    )


@event.listens_for(UUIDMixin, 'before_insert', propagate=True)
def generate_gid(mapper, connection, target):
    """
    Auto-generate GID before insert.

    This event listener is triggered before any model inheriting from UUIDMixin
    is inserted into the database. It generates a NanoID for the GID field.

    Note: UUID is auto-generated by PostgreSQL's gen_random_uuid(), so we don't
    need to set it here. The GID is completely independent of the UUID.
    """
    # Only generate GID if not already set
    if not target.gid:
        target.gid = identifiers.generate_gid()

    # Validate the GID format
    identifiers.validate_gid(target.gid)
