services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: legalease-postgres
    environment:
      POSTGRES_DB: legalease
      POSTGRES_USER: legalease
      POSTGRES_PASSWORD: legalease_dev
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legalease -d legalease"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - legalease-network
    restart: unless-stopped

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: legalease-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - legalease-network
    restart: unless-stopped

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: legalease-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - legalease-network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: legalease-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: legalease
      MINIO_ROOT_PASSWORD: legalease_dev_secret
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - legalease-network
    restart: unless-stopped

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: legalease-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/legalease_dev
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_pagecache_size: 512m
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - legalease-network
    restart: unless-stopped

  # Ollama LLM Server
  ollama:
    image: ollama/ollama:latest
    container_name: legalease-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0:11434
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legalease-network
    restart: unless-stopped
    # Uncomment if you have GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: development
    container_name: legalease-backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://legalease:legalease_dev@postgres:5432/legalease
      REDIS_URL: redis://redis:6379/0
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: legalease
      MINIO_SECRET_KEY: legalease_dev_secret
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: legalease_dev
      OLLAMA_BASE_URL: http://ollama:11434
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      ENVIRONMENT: development
      DEBUG: "true"
    volumes:
      - ./backend:/app
      - backend_cache:/root/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - legalease-network
    restart: unless-stopped

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      target: development
    container_name: legalease-worker
    command: celery -A app.worker worker --loglevel=info --concurrency=2
    environment:
      DATABASE_URL: postgresql://legalease:legalease_dev@postgres:5432/legalease
      REDIS_URL: redis://redis:6379/0
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: legalease
      MINIO_SECRET_KEY: legalease_dev_secret
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: legalease_dev
      OLLAMA_BASE_URL: http://ollama:11434
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      ENVIRONMENT: development
      DEBUG: "true"
    volumes:
      - ./backend:/app
      - worker_cache:/root/.cache
      - ollama_models:/root/.ollama
    depends_on:
      - redis
      - postgres
      - backend
    networks:
      - legalease-network
    restart: unless-stopped

  # Celery Beat Scheduler
  beat:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      target: development
    container_name: legalease-beat
    command: celery -A app.worker beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://legalease:legalease_dev@postgres:5432/legalease
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      ENVIRONMENT: development
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - postgres
      - backend
    networks:
      - legalease-network
    restart: unless-stopped

  # Nuxt Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: development
    container_name: legalease-frontend
    command: pnpm dev
    ports:
      - "3000:3000"
    environment:
      NUXT_PUBLIC_API_BASE: http://localhost:8000
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.nuxt
    depends_on:
      - backend
    networks:
      - legalease-network
    restart: unless-stopped

networks:
  legalease-network:
    driver: bridge
    name: legalease-network

volumes:
  postgres_data:
    name: legalease-postgres-data
  redis_data:
    name: legalease-redis-data
  qdrant_data:
    name: legalease-qdrant-data
  minio_data:
    name: legalease-minio-data
  neo4j_data:
    name: legalease-neo4j-data
  neo4j_logs:
    name: legalease-neo4j-logs
  neo4j_import:
    name: legalease-neo4j-import
  neo4j_plugins:
    name: legalease-neo4j-plugins
  ollama_data:
    name: legalease-ollama-data
  ollama_models:
    name: legalease-ollama-models
  backend_cache:
    name: legalease-backend-cache
  worker_cache:
    name: legalease-worker-cache
