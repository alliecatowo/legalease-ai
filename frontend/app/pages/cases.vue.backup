<script setup lang="ts">
const { data: cases, refresh } = await useFetch('/api/v1/cases')

const selectedStatus = ref('all')
const searchQuery = ref('')

const statusOptions = [
  { label: 'All Cases', value: 'all' },
  { label: 'Active', value: 'ACTIVE' },
  { label: 'Processing', value: 'PROCESSING' },
  { label: 'Staging', value: 'STAGING' },
  { label: 'Unloaded', value: 'UNLOADED' },
  { label: 'Archived', value: 'ARCHIVED' }
]

const filteredCases = computed(() => {
  if (!cases.value) return []

  let filtered = cases.value

  if (selectedStatus.value !== 'all') {
    filtered = filtered.filter(c => c.status === selectedStatus.value)
  }

  if (searchQuery.value) {
    const query = searchQuery.value.toLowerCase()
    filtered = filtered.filter(c =>
      c.name.toLowerCase().includes(query) ||
      c.description?.toLowerCase().includes(query)
    )
  }

  return filtered
})

const stats = computed(() => {
  if (!cases.value) return { total: 0, active: 0, storage: 0 }

  return {
    total: cases.value.length,
    active: cases.value.filter(c => c.status === 'ACTIVE').length,
    storage: cases.value.reduce((acc, c) => acc + (c.total_size || 0), 0)
  }
})

function formatBytes(bytes: number) {
  if (bytes === 0) return '0 B'
  const k = 1024
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i]
}

const statusColors = {
  ACTIVE: 'green',
  PROCESSING: 'blue',
  STAGING: 'amber',
  UNLOADED: 'neutral',
  ARCHIVED: 'neutral'
}
</script>

<template>
  <UDashboardPanel title="Cases" description="Manage and organize your legal cases">
    <template #header>
      <div class="flex items-center justify-between gap-3">
        <div class="flex-1">
          <UInput v-model="searchQuery" icon="i-lucide-search" placeholder="Search cases..." />
        </div>
        <USelectMenu v-model="selectedStatus" :items="statusOptions" />
        <UButton icon="i-lucide-plus" label="New Case" color="primary" />
      </div>
    </template>

    <!-- Stats -->
    <UPageGrid class="mb-6">
      <UPageCard title="Total Cases" :description="stats.total.toString()">
        <template #icon>
          <UIcon name="i-lucide-folder" class="size-5" />
        </template>
      </UPageCard>

      <UPageCard title="Active Cases" :description="stats.active.toString()">
        <template #icon>
          <UIcon name="i-lucide-folder-open" class="size-5" />
        </template>
      </UPageCard>

      <UPageCard title="Storage Used" :description="formatBytes(stats.storage)">
        <template #icon>
          <UIcon name="i-lucide-hard-drive" class="size-5" />
        </template>
      </UPageCard>
    </UPageGrid>

    <!-- Cases Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      <UCard v-for="caseItem in filteredCases" :key="caseItem.id">
        <template #header>
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <h3 class="font-semibold text-base">{{ caseItem.name }}</h3>
              <p v-if="caseItem.description" class="text-sm text-muted mt-1">
                {{ caseItem.description }}
              </p>
            </div>
            <UBadge :color="statusColors[caseItem.status]" variant="subtle">
              {{ caseItem.status }}
            </UBadge>
          </div>
        </template>

        <div class="space-y-3">
          <!-- Stats -->
          <div class="grid grid-cols-2 gap-3 text-sm">
            <div>
              <div class="text-muted">Documents</div>
              <div class="font-medium">{{ caseItem.document_count || 0 }}</div>
            </div>
            <div>
              <div class="text-muted">Size</div>
              <div class="font-medium">{{ formatBytes(caseItem.total_size || 0) }}</div>
            </div>
          </div>

          <!-- Progress -->
          <div v-if="caseItem.status === 'PROCESSING'">
            <UProgress :value="50" />
          </div>

          <!-- Tags -->
          <div v-if="caseItem.tags?.length" class="flex flex-wrap gap-1">
            <UChip v-for="tag in caseItem.tags" :key="tag" size="sm">
              {{ tag }}
            </UChip>
          </div>
        </div>

        <template #footer>
          <div class="flex items-center justify-between">
            <UButton
              v-if="caseItem.status === 'ACTIVE'"
              variant="ghost"
              color="neutral"
              size="sm"
              icon="i-lucide-pause"
            >
              Unload
            </UButton>
            <UButton
              v-else-if="caseItem.status === 'UNLOADED'"
              variant="ghost"
              color="neutral"
              size="sm"
              icon="i-lucide-play"
            >
              Load
            </UButton>
            <UButton
              variant="ghost"
              color="neutral"
              size="sm"
              icon="i-lucide-eye"
              :to="`/cases/${caseItem.id}`"
            >
              View
            </UButton>
          </div>
        </template>
      </UCard>
    </div>

    <!-- Empty State -->
    <div v-if="!filteredCases.length" class="text-center py-16">
      <UIcon name="i-lucide-folder" class="size-16 text-muted mx-auto mb-4 opacity-50" />
      <h3 class="text-xl font-semibold mb-2">No cases found</h3>
      <p class="text-muted mb-6">Get started by creating your first case</p>
      <UButton icon="i-lucide-plus" label="Create Case" color="primary" />
    </div>
  </UDashboardPanel>
</template>
